{"version":3,"file":"content.js","mappingssources":["webpack://guardian-angel/./src/content/content.js"],"sourcesContent":["/******/ (() => { // webpackBootstrap\r\n/*!********************************!*\\\r\n  !*** ./src/content/content.js ***!\r\n  \\********************************/\r\n// Initialize settings\r\nlet enabled = true;\r\nlet sensitivity = 'medium';\r\n\r\n// Load settings\r\nchrome.storage.local.get(['enabled', 'sensitivity'], (result) => {\r\n  enabled = result.enabled !== false;\r\n  sensitivity = result.sensitivity || 'medium';\r\n});\r\n\r\n// Listen for settings changes\r\nchrome.storage.onChanged.addListener((changes) => {\r\n  if (changes.enabled) {\r\n    enabled = changes.enabled.newValue;\r\n  }\r\n  if (changes.sensitivity) {\r\n    sensitivity = changes.sensitivity.newValue;\r\n  }\r\n});\r\n\r\n// Function to extract text from a node\r\nfunction extractText(node) {\r\n  if (node.nodeType === Node.TEXT_NODE) {\r\n    return node.textContent.trim();\r\n  }\r\n  \r\n  if (node.nodeType !== Node.ELEMENT_NODE) {\r\n    return '';\r\n  }\r\n  \r\n  // Skip script, style, and hidden elements\r\n  const tagName = node.tagName.toLowerCase();\r\n  if (tagName === 'script' || tagName === 'style' || node.style.display === 'none') {\r\n    return '';\r\n  }\r\n  \r\n  let text = '';\r\n  for (const child of node.childNodes) {\r\n    text += ' ' + extractText(child);\r\n  }\r\n  return text.trim();\r\n}\r\n\r\n// Function to analyze text chunks\r\nfunction analyzeTextChunks(node) {\r\n  if (!enabled) return;\r\n  \r\n  const text = extractText(node);\r\n  if (text.length < 10) return;\r\n  \r\n  // Split long text into manageable chunks (max 500 chars)\r\n  const chunks = [];\r\n  let currentChunk = '';\r\n  \r\n  text.split(/\\s+/).forEach(word => {\r\n    if ((currentChunk + ' ' + word).length > 500) {\r\n      chunks.push(currentChunk);\r\n      currentChunk = word;\r\n    } else {\r\n      currentChunk += (currentChunk ? ' ' : '') + word;\r\n    }\r\n  });\r\n  \r\n  if (currentChunk) {\r\n    chunks.push(currentChunk);\r\n  }\r\n  \r\n  // Send chunks to background script for analysis\r\n  chunks.forEach(chunk => {\r\n    chrome.runtime.sendMessage({\r\n      action: 'analyzeText',\r\n      text: chunk,\r\n      sensitivity: sensitivity\r\n    });\r\n  });\r\n}\r\n\r\n// Observe DOM changes\r\nconst observer = new MutationObserver(mutations => {\r\n  if (!enabled) return;\r\n  \r\n  mutations.forEach(mutation => {\r\n    if (mutation.type === 'childList') {\r\n      mutation.addedNodes.forEach(node => {\r\n        analyzeTextChunks(node);\r\n      });\r\n    }\r\n  });\r\n});\r\n\r\n// Start observing\r\nobserver.observe(document.body, {\r\n  childList: true,\r\n  subtree: true\r\n});\r\n\r\n// Initial scan of the page\r\nanalyzeTextChunks(document.body);\r\n\r\n// Listen for harassment alerts from background script\r\nchrome.runtime.onMessage.addListener((message) => {\r\n  if (message.action === 'harassmentDetected') {\r\n    highlightHarassment(message.text, message.confidence);\r\n  }\r\n});\r\n\r\n// Function to highlight harassment\r\nfunction highlightHarassment(text, confidence) {\r\n  // Implementation to highlight or warn about harassment\r\n  // This could create a warning banner, highlight text, etc.\r\n  console.log(`Harassment detected (${confidence.toFixed(2)}): ${text}`);\r\n  \r\n  // Create a notification banner\r\n  const banner = document.createElement('div');\r\n  banner.style.position = 'fixed';\r\n  banner.style.top = '10px';\r\n  banner.style.left = '50%';\r\n  banner.style.transform = 'translateX(-50%)';\r\n  banner.style.backgroundColor = 'rgba(255, 0, 0, 0.8)';\r\n  banner.style.color = 'white';\r\n  banner.style.padding = '10px 20px';\r\n  banner.style.borderRadius = '5px';\r\n  banner.style.zIndex = '10000';\r\n  banner.style.boxShadow = '0 2px 10px rgba(0,0,0,0.2)';\r\n  banner.textContent = `⚠️ Potential harassment detected (${(confidence * 100).toFixed(0)}% confidence)`;\r\n  \r\n  document.body.appendChild(banner);\r\n  \r\n  // Remove after 5 seconds\r\n  setTimeout(() => {\r\n    banner.remove();\r\n  }, 5000);\r\n}\r\n\r\n/******/ })()\r\n;\r\n//# sourceMappingURL=content.js.map"],"names":[],"sourceRoot":""}