{"version":3,"file":"content.js","mappingssources":["webpack://guardian-angel/./src/content/content.js"],"sourcesContent":["// Initialize settings\nlet enabled = true;\nlet sensitivity = 'medium';\n\n// Load settings\nchrome.storage.local.get(['enabled', 'sensitivity'], (result) => {\n  enabled = result.enabled !== false;\n  sensitivity = result.sensitivity || 'medium';\n});\n\n// Listen for settings changes\nchrome.storage.onChanged.addListener((changes) => {\n  if (changes.enabled) {\n    enabled = changes.enabled.newValue;\n  }\n  if (changes.sensitivity) {\n    sensitivity = changes.sensitivity.newValue;\n  }\n});\n\n// Function to extract text from a node\nfunction extractText(node) {\n  if (node.nodeType === Node.TEXT_NODE) {\n    return node.textContent.trim();\n  }\n  \n  if (node.nodeType !== Node.ELEMENT_NODE) {\n    return '';\n  }\n  \n  // Skip script, style, and hidden elements\n  const tagName = node.tagName.toLowerCase();\n  if (tagName === 'script' || tagName === 'style' || node.style.display === 'none') {\n    return '';\n  }\n  \n  let text = '';\n  for (const child of node.childNodes) {\n    text += ' ' + extractText(child);\n  }\n  return text.trim();\n}\n\n// Function to analyze text chunks\nfunction analyzeTextChunks(node) {\n  if (!enabled) return;\n  \n  const text = extractText(node);\n  if (text.length < 10) return;\n  \n  // Split long text into manageable chunks (max 500 chars)\n  const chunks = [];\n  let currentChunk = '';\n  \n  text.split(/\\s+/).forEach(word => {\n    if ((currentChunk + ' ' + word).length > 500) {\n      chunks.push(currentChunk);\n      currentChunk = word;\n    } else {\n      currentChunk += (currentChunk ? ' ' : '') + word;\n    }\n  });\n  \n  if (currentChunk) {\n    chunks.push(currentChunk);\n  }\n  \n  // Send chunks to background script for analysis\n  chunks.forEach(chunk => {\n    chrome.runtime.sendMessage({\n      action: 'analyzeText',\n      text: chunk,\n      sensitivity: sensitivity\n    });\n  });\n}\n\n// Observe DOM changes\nconst observer = new MutationObserver(mutations => {\n  if (!enabled) return;\n  \n  mutations.forEach(mutation => {\n    if (mutation.type === 'childList') {\n      mutation.addedNodes.forEach(node => {\n        analyzeTextChunks(node);\n      });\n    }\n  });\n});\n\n// Start observing\nobserver.observe(document.body, {\n  childList: true,\n  subtree: true\n});\n\n// Initial scan of the page\nanalyzeTextChunks(document.body);\n\n// Listen for harassment alerts from background script\nchrome.runtime.onMessage.addListener((message) => {\n  if (message.action === 'harassmentDetected') {\n    highlightHarassment(message.text, message.confidence);\n  }\n});\n\n// Function to highlight harassment\nfunction highlightHarassment(text, confidence) {\n  // Implementation to highlight or warn about harassment\n  // This could create a warning banner, highlight text, etc.\n  console.log(`Harassment detected (${confidence.toFixed(2)}): ${text}`);\n  \n  // Create a notification banner\n  const banner = document.createElement('div');\n  banner.style.position = 'fixed';\n  banner.style.top = '10px';\n  banner.style.left = '50%';\n  banner.style.transform = 'translateX(-50%)';\n  banner.style.backgroundColor = 'rgba(255, 0, 0, 0.8)';\n  banner.style.color = 'white';\n  banner.style.padding = '10px 20px';\n  banner.style.borderRadius = '5px';\n  banner.style.zIndex = '10000';\n  banner.style.boxShadow = '0 2px 10px rgba(0,0,0,0.2)';\n  banner.textContent = `⚠️ Potential harassment detected (${(confidence * 100).toFixed(0)}% confidence)`;\n  \n  document.body.appendChild(banner);\n  \n  // Remove after 5 seconds\n  setTimeout(() => {\n    banner.remove();\n  }, 5000);\n}\n"],"names":[],"sourceRoot":""}