{"version":3,"file":"background.js","mappingssources":["webpack://guardian-angel/./src/background/background.js"],"sourcesContent":["try{\n\n// Initialize the local LLM service\nlet llmServiceReady = false;\nlet llmServiceUrl = 'http://localhost:8000/api/analyze';\n\n// Function to analyze text using a local LLM service\n// Function to analyze text using a local LLM service\nasync function analyzeWithLocalLLM(text, sensitivity) {\n    try {\n      // Check if service is available\n      const controller = new AbortController();\n      const timeoutId = setTimeout(() => controller.abort(), 5000); // 5 second timeout\n      \n      const response = await fetch(llmServiceUrl, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          text: text,\n          sensitivity: sensitivity\n        }),\n        signal: controller.signal\n      });\n      \n      clearTimeout(timeoutId);\n      \n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      \n      const data = await response.json();\n      llmServiceReady = true; // Mark service as ready if successful\n      return {\n        isHarassment: data.isHarassment,\n        confidence: data.confidence || 0.5,\n        text: text\n      };\n    } catch (error) {\n      console.error('Error analyzing text with local LLM:', error);\n      // If service is unavailable, mark it as not ready\n      if (error.name === 'AbortError' || error.message.includes('Failed to fetch')) {\n        llmServiceReady = false;\n      }\n      // Fallback to simple keyword detection\n      return analyzeWithKeywords(text, sensitivity);\n    }\n  }\n  \n\n// Simple fallback keyword-based analysis\nfunction analyzeWithKeywords(text, sensitivity) {\n  const harassmentKeywords = {\n    high: [\n      'bitch', 'slut', 'whore', 'cunt', 'skank',\n      'get back to the kitchen', 'make me a sandwich',\n      'asking for it', 'should be raped'\n    ],\n    medium: [\n      'dumb girl', 'stupid woman', 'females are', 'like a girl',\n      'for a woman', 'emotional', 'hysteric', 'attention seeking'\n    ],\n    low: [\n      'bossy', 'shrill', 'nagging', 'feminazi', 'man-hater'\n    ]\n  };\n  \n  // Normalize text for comparison\n  const normalizedText = text.toLowerCase();\n  \n  // Check for keywords based on sensitivity\n  let keywordsToCheck = [];\n  if (sensitivity === 'high') {\n    keywordsToCheck = harassmentKeywords.high;\n  } else if (sensitivity === 'medium') {\n    keywordsToCheck = [...harassmentKeywords.high, ...harassmentKeywords.medium];\n  } else {\n    keywordsToCheck = [...harassmentKeywords.high, ...harassmentKeywords.medium, ...harassmentKeywords.low];\n  }\n  \n  // Check if any keywords are present\n  for (const keyword of keywordsToCheck) {\n    if (normalizedText.includes(keyword)) {\n      return {\n        isHarassment: true,\n        confidence: 0.7,\n        text: text\n      };\n    }\n  }\n  \n  return {\n    isHarassment: false,\n    confidence: 0.3,\n    text: text\n  };\n}\n\n// Listen for messages from content script\nchrome.runtime.onMessage.addListener((message, sender, sendResponse) => {\n  if (message.action === 'analyzeText') {\n    analyzeWithLocalLLM(message.text, message.sensitivity)\n      .then(result => {\n        if (result.isHarassment) {\n          // Update detection count\n          chrome.storage.local.get(['detectionCount'], (data) => {\n            const newCount = (data.detectionCount || 0) + 1;\n            chrome.storage.local.set({ detectionCount: newCount });\n          });\n          \n          // Send alert to content script\n          chrome.tabs.sendMessage(sender.tab.id, {\n            action: 'harassmentDetected',\n            text: result.text,\n            confidence: result.confidence\n          });\n        }\n      })\n      .catch(error => console.error('Error in harassment analysis:', error));\n  }\n  \n  // Must return true for asynchronous response\n  return true;\n});\n\n// Set default values when extension is installed\nchrome.runtime.onInstalled.addListener(() => {\n  chrome.storage.local.set({\n    enabled: true,\n    sensitivity: 'medium',\n    detectionCount: 0\n  });\n});\n}\ncatch (error) {\n    console.error('Background script initialization error:', error);\n}"],"names":[],"sourceRoot":""}